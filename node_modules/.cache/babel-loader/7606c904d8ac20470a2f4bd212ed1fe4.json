{"ast":null,"code":"import defaultDayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\nimport localizedFormatPlugin from 'dayjs/plugin/localizedFormat';\nimport isBetweenPlugin from 'dayjs/plugin/isBetween';\ndefaultDayjs.extend(customParseFormatPlugin);\ndefaultDayjs.extend(localizedFormatPlugin);\ndefaultDayjs.extend(isBetweenPlugin);\n\nvar withLocale = function (dayjs, locale) {\n  return !locale ? dayjs : function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return dayjs.apply(void 0, args).locale(locale);\n  };\n};\n\nvar defaultFormats = {\n  normalDateWithWeekday: \"ddd, MMM D\",\n  normalDate: \"D MMMM\",\n  shortDate: \"MMM D\",\n  monthAndDate: \"MMMM D\",\n  dayOfMonth: \"D\",\n  year: \"YYYY\",\n  month: \"MMMM\",\n  monthShort: \"MMM\",\n  monthAndYear: \"MMMM YYYY\",\n  weekday: \"dddd\",\n  weekdayShort: \"ddd\",\n  minutes: \"mm\",\n  hours12h: \"hh\",\n  hours24h: \"HH\",\n  seconds: \"ss\",\n  fullTime: \"LT\",\n  fullTime12h: \"hh:mm A\",\n  fullTime24h: \"HH:mm\",\n  fullDate: \"ll\",\n  fullDateWithWeekday: \"dddd, LL\",\n  fullDateTime: \"lll\",\n  fullDateTime12h: \"ll hh:mm A\",\n  fullDateTime24h: \"ll HH:mm\",\n  keyboardDate: \"L\",\n  keyboardDateTime: \"L LT\",\n  keyboardDateTime12h: \"L hh:mm A\",\n  keyboardDateTime24h: \"L HH:mm\"\n};\n\nvar DayjsUtils =\n/** @class */\nfunction () {\n  function DayjsUtils(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        locale = _b.locale,\n        formats = _b.formats,\n        instance = _b.instance;\n\n    this.lib = \"dayjs\";\n    this.rawDayJsInstance = instance || defaultDayjs;\n    this.dayjs = withLocale(this.rawDayJsInstance, locale);\n    this.locale = locale;\n    this.formats = Object.assign({}, defaultFormats, formats);\n  }\n\n  DayjsUtils.prototype.is12HourCycleInCurrentLocale = function () {\n    var _a, _b;\n    /* istanbul ignore next */\n\n\n    return /A|a/.test((_b = (_a = this.rawDayJsInstance.Ls[this.locale || \"en\"]) === null || _a === void 0 ? void 0 : _a.formats) === null || _b === void 0 ? void 0 : _b.LT);\n  };\n\n  DayjsUtils.prototype.getCurrentLocaleCode = function () {\n    return this.locale || \"en\";\n  };\n\n  DayjsUtils.prototype.getFormatHelperText = function (format) {\n    var _this = this; // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js\n\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?)|./g;\n    return format.match(localFormattingTokens).map(function (token) {\n      var _a, _b;\n\n      var firstCharacter = token[0];\n\n      if (firstCharacter === \"L\") {\n        /* istanbul ignore next */\n        return (_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || \"en\"]) === null || _a === void 0 ? void 0 : _a.formats[token]) !== null && _b !== void 0 ? _b : token;\n      }\n\n      return token;\n    }).join(\"\").replace(/a/gi, \"(a|p)m\").toLocaleLowerCase();\n  };\n\n  DayjsUtils.prototype.parse = function (value, format) {\n    if (value === \"\") {\n      return null;\n    }\n\n    return this.dayjs(value, format, this.locale);\n  };\n\n  DayjsUtils.prototype.date = function (value) {\n    if (value === null) {\n      return null;\n    }\n\n    return this.dayjs(value);\n  };\n\n  DayjsUtils.prototype.toJsDate = function (value) {\n    return value.toDate();\n  };\n\n  DayjsUtils.prototype.isValid = function (value) {\n    return this.dayjs(value).isValid();\n  };\n\n  DayjsUtils.prototype.isNull = function (date) {\n    return date === null;\n  };\n\n  DayjsUtils.prototype.getDiff = function (date, comparing, units) {\n    return date.diff(comparing, units);\n  };\n\n  DayjsUtils.prototype.isAfter = function (date, value) {\n    return date.isAfter(value);\n  };\n\n  DayjsUtils.prototype.isBefore = function (date, value) {\n    return date.isBefore(value);\n  };\n\n  DayjsUtils.prototype.isAfterDay = function (date, value) {\n    return date.isAfter(value, \"day\");\n  };\n\n  DayjsUtils.prototype.isBeforeDay = function (date, value) {\n    return date.isBefore(value, \"day\");\n  };\n\n  DayjsUtils.prototype.isBeforeYear = function (date, value) {\n    return date.isBefore(value, \"year\");\n  };\n\n  DayjsUtils.prototype.isAfterYear = function (date, value) {\n    return date.isAfter(value, \"year\");\n  };\n\n  DayjsUtils.prototype.startOfDay = function (date) {\n    return date.clone().startOf(\"day\");\n  };\n\n  DayjsUtils.prototype.endOfDay = function (date) {\n    return date.clone().endOf(\"day\");\n  };\n\n  DayjsUtils.prototype.format = function (date, formatKey) {\n    return this.formatByString(date, this.formats[formatKey]);\n  };\n\n  DayjsUtils.prototype.formatByString = function (date, formatString) {\n    return this.dayjs(date).format(formatString);\n  };\n\n  DayjsUtils.prototype.formatNumber = function (numberToFormat) {\n    return numberToFormat;\n  };\n\n  DayjsUtils.prototype.getHours = function (date) {\n    return date.hour();\n  };\n\n  DayjsUtils.prototype.addSeconds = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"second\") : date.add(count, \"second\");\n  };\n\n  DayjsUtils.prototype.addMinutes = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"minute\") : date.add(count, \"minute\");\n  };\n\n  DayjsUtils.prototype.addHours = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"hour\") : date.add(count, \"hour\");\n  };\n\n  DayjsUtils.prototype.addDays = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"day\") : date.add(count, \"day\");\n  };\n\n  DayjsUtils.prototype.addWeeks = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"week\") : date.add(count, \"week\");\n  };\n\n  DayjsUtils.prototype.addMonths = function (date, count) {\n    return count < 0 ? date.subtract(Math.abs(count), \"month\") : date.add(count, \"month\");\n  };\n\n  DayjsUtils.prototype.setMonth = function (date, count) {\n    return date.set(\"month\", count);\n  };\n\n  DayjsUtils.prototype.setHours = function (date, count) {\n    return date.set(\"hour\", count);\n  };\n\n  DayjsUtils.prototype.getMinutes = function (date) {\n    return date.minute();\n  };\n\n  DayjsUtils.prototype.setMinutes = function (date, count) {\n    return date.clone().set(\"minute\", count);\n  };\n\n  DayjsUtils.prototype.getSeconds = function (date) {\n    return date.second();\n  };\n\n  DayjsUtils.prototype.setSeconds = function (date, count) {\n    return date.clone().set(\"second\", count);\n  };\n\n  DayjsUtils.prototype.getMonth = function (date) {\n    return date.month();\n  };\n\n  DayjsUtils.prototype.getDaysInMonth = function (date) {\n    return date.daysInMonth();\n  };\n\n  DayjsUtils.prototype.isSameDay = function (date, comparing) {\n    return date.isSame(comparing, \"day\");\n  };\n\n  DayjsUtils.prototype.isSameMonth = function (date, comparing) {\n    return date.isSame(comparing, \"month\");\n  };\n\n  DayjsUtils.prototype.isSameYear = function (date, comparing) {\n    return date.isSame(comparing, \"year\");\n  };\n\n  DayjsUtils.prototype.isSameHour = function (date, comparing) {\n    return date.isSame(comparing, \"hour\");\n  };\n\n  DayjsUtils.prototype.getMeridiemText = function (ampm) {\n    return ampm === \"am\" ? \"AM\" : \"PM\";\n  };\n\n  DayjsUtils.prototype.startOfMonth = function (date) {\n    return date.clone().startOf(\"month\");\n  };\n\n  DayjsUtils.prototype.endOfMonth = function (date) {\n    return date.clone().endOf(\"month\");\n  };\n\n  DayjsUtils.prototype.startOfWeek = function (date) {\n    return date.clone().startOf(\"week\");\n  };\n\n  DayjsUtils.prototype.endOfWeek = function (date) {\n    return date.clone().endOf(\"week\");\n  };\n\n  DayjsUtils.prototype.getNextMonth = function (date) {\n    return date.clone().add(1, \"month\");\n  };\n\n  DayjsUtils.prototype.getPreviousMonth = function (date) {\n    return date.clone().subtract(1, \"month\");\n  };\n\n  DayjsUtils.prototype.getMonthArray = function (date) {\n    var firstMonth = date.clone().startOf(\"year\");\n    var monthArray = [firstMonth];\n\n    while (monthArray.length < 12) {\n      var prevMonth = monthArray[monthArray.length - 1];\n      monthArray.push(this.getNextMonth(prevMonth));\n    }\n\n    return monthArray;\n  };\n\n  DayjsUtils.prototype.getYear = function (date) {\n    return date.year();\n  };\n\n  DayjsUtils.prototype.setYear = function (date, year) {\n    return date.clone().set(\"year\", year);\n  };\n\n  DayjsUtils.prototype.mergeDateAndTime = function (date, time) {\n    return date.hour(time.hour()).minute(time.minute()).second(time.second());\n  };\n\n  DayjsUtils.prototype.getWeekdays = function () {\n    var _this = this;\n\n    var start = this.dayjs().startOf(\"week\");\n    return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {\n      return _this.formatByString(start.add(diff, \"day\"), \"dd\");\n    });\n  };\n\n  DayjsUtils.prototype.isEqual = function (value, comparing) {\n    if (value === null && comparing === null) {\n      return true;\n    }\n\n    return this.dayjs(value).isSame(comparing);\n  };\n\n  DayjsUtils.prototype.getWeekArray = function (date) {\n    var start = this.dayjs(date).clone().startOf(\"month\").startOf(\"week\");\n    var end = this.dayjs(date).clone().endOf(\"month\").endOf(\"week\");\n    var count = 0;\n    var current = start;\n    var nestedWeeks = [];\n\n    while (current.isBefore(end)) {\n      var weekNumber = Math.floor(count / 7);\n      nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n      nestedWeeks[weekNumber].push(current);\n      current = current.clone().add(1, \"day\");\n      count += 1;\n    }\n\n    return nestedWeeks;\n  };\n\n  DayjsUtils.prototype.getYearRange = function (start, end) {\n    var startDate = this.dayjs(start).startOf(\"year\");\n    var endDate = this.dayjs(end).endOf(\"year\");\n    var years = [];\n    var current = startDate;\n\n    while (current.isBefore(endDate)) {\n      years.push(current);\n      current = current.clone().add(1, \"year\");\n    }\n\n    return years;\n  };\n\n  DayjsUtils.prototype.isWithinRange = function (date, _a) {\n    var start = _a[0],\n        end = _a[1];\n    return date.isBetween(start, end, null, \"[]\");\n  };\n\n  return DayjsUtils;\n}();\n\nexport default DayjsUtils;","map":null,"metadata":{},"sourceType":"module"}