{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction decodeToken(token) {\n  try {\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    } else {\n      var payload = token.split(\".\")[1];\n      var decoded = JSON.parse(atob(payload));\n      return decoded;\n    }\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction isTokenExpired(token) {\n  var decodedToken = decodeToken(token);\n  var result = true;\n\n  if (decodedToken && decodedToken.exp) {\n    var expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp);\n    result = expirationDate.valueOf() < new Date().valueOf();\n  } else {\n    result = true;\n  }\n\n  return result;\n}\n\nfunction useJwt(token) {\n  var _useState = useState(false),\n      isExpired = _useState[0],\n      setIsExpired = _useState[1];\n\n  var _useState2 = useState(null),\n      decodedToken = _useState2[0],\n      setDecodedToken = _useState2[1];\n\n  useEffect(function () {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  }, [token]);\n  return {\n    isExpired: isExpired,\n    decodedToken: decodedToken\n  };\n}\n\nexport { decodeToken, isTokenExpired as isExpired, useJwt };","map":null,"metadata":{},"sourceType":"module"}