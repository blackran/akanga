{"ast":null,"code":"module.exports = o;\n\nfunction o(obj, par) {\n  if (!(this instanceof o)) return new o(obj, par);\n  this.obj = obj || {};\n  this.par = par;\n}\n\no.prototype.use = c(function (fn) {\n  this.obj = fn(this.obj);\n});\no.prototype.set = c(function (key, value) {\n  this.obj[key] = value;\n});\n\no.prototype.get = function (key) {\n  return key ? this.obj[key] : this.obj;\n};\n\no.prototype.sub = function (key) {\n  var obj = this.obj;\n  if (!obj[key]) obj[key] = {};\n  return o(obj[key], this);\n};\n\no.prototype.tmp = function () {\n  return o({}, this);\n};\n\no.prototype.out = function () {\n  return this.par;\n};\n\no.prototype.keys = function () {\n  return Object.keys(this.obj);\n};\n\no.prototype.parEach = c(function (fn) {\n  var self = this;\n  self.par.keys().forEach(function (k) {\n    fn.call(self, k, self.par.get(k));\n  });\n});\no.prototype.each = c(function (fn) {\n  var self = this;\n  self.keys().forEach(function (k) {\n    fn.call(self, k, self.get(k));\n  });\n});\n\no.prototype.clone = function () {\n  return this.tmp({}).parEach(function (k, v) {\n    this.set(k, v);\n  });\n};\n\nfunction c(fn) {\n  return function () {\n    fn.apply(this, arguments);\n    return this;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}